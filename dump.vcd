$date
	Mon Nov 25 16:13:30 2024
$end
$version
	Icarus Verilog
$end
$timescale
	1s
$end
$scope module Top_tb $end
$scope module top_module $end
$var wire 16 ! branchpc [15:0] $end
$var wire 1 " clk $end
$var wire 1 # is_branch_taken $end
$var wire 1 $ reset $end
$var wire 1 % stall $end
$var wire 128 & regvalwb [127:0] $end
$var wire 20 ' rdvalmem2 [19:0] $end
$var wire 20 ( rdvalmem1 [19:0] $end
$var wire 4 ) opcode2 [3:0] $end
$var wire 4 * opcode1 [3:0] $end
$var wire 16 + op22alu2 [15:0] $end
$var wire 16 , op22 [15:0] $end
$var wire 16 - op21alu1 [15:0] $end
$var wire 16 . op21 [15:0] $end
$var wire 16 / op12 [15:0] $end
$var wire 16 0 op11 [15:0] $end
$var wire 16 1 ldresultwb [15:0] $end
$var wire 16 2 ldresult2 [15:0] $end
$var wire 16 3 ldresult1 [15:0] $end
$var wire 1 4 iswbwb $end
$var wire 1 5 iswbmem2 $end
$var wire 1 6 iswbmem1 $end
$var wire 1 7 iswbalu2 $end
$var wire 1 8 iswbalu1 $end
$var wire 1 9 iswb2 $end
$var wire 1 : iswb1 $end
$var wire 1 ; isubranch2 $end
$var wire 1 < isubranch1 $end
$var wire 1 = issub2 $end
$var wire 1 > issub1 $end
$var wire 1 ? isstalu2 $end
$var wire 1 @ isstalu1 $end
$var wire 1 A isstall $end
$var wire 1 B isst2 $end
$var wire 1 C isst1 $end
$var wire 1 D issingleinstr $end
$var wire 1 E isor2 $end
$var wire 1 F isor1 $end
$var wire 1 G isnot2 $end
$var wire 1 H isnot1 $end
$var wire 1 I ismul2 $end
$var wire 1 J ismul1 $end
$var wire 1 K ismov2 $end
$var wire 1 L ismov1 $end
$var wire 1 M islsr2 $end
$var wire 1 N islsr1 $end
$var wire 1 O islsl2 $end
$var wire 1 P islsl1 $end
$var wire 1 Q isldwb $end
$var wire 1 R isldmem2 $end
$var wire 1 S isldmem1 $end
$var wire 1 T isldalu2 $end
$var wire 1 U isldalu1 $end
$var wire 1 V isld2 $end
$var wire 1 W isld1 $end
$var wire 1 X iscmp2 $end
$var wire 1 Y iscmp1 $end
$var wire 1 Z isbgt2 $end
$var wire 1 [ isbgt1 $end
$var wire 1 \ isbeq2 $end
$var wire 1 ] isbeq1 $end
$var wire 1 ^ isand2 $end
$var wire 1 _ isand1 $end
$var wire 1 ` isadd2 $end
$var wire 1 a isadd1 $end
$var wire 1 b is_branch_taken2 $end
$var wire 1 c is_branch_taken1 $end
$var wire 16 d instrwb [15:0] $end
$var wire 16 e instrmemwb2 [15:0] $end
$var wire 16 f instrmemwb1 [15:0] $end
$var wire 16 g instrdecodealu2 [15:0] $end
$var wire 16 h instrdecodealu1 [15:0] $end
$var wire 16 i instralumem2 [15:0] $end
$var wire 16 j instralumem1 [15:0] $end
$var wire 16 k instr2relayerdecode [15:0] $end
$var wire 16 l instr2fetchrelayer [15:0] $end
$var wire 16 m instr1relayerdecode [15:0] $end
$var wire 16 n instr1fetchrelayer [15:0] $end
$var wire 1 o immflag1 $end
$var wire 1 p imm_flag2 $end
$var wire 5 q imm2 [4:0] $end
$var wire 5 r imm1 [4:0] $end
$var wire 16 s branchpc2 [15:0] $end
$var wire 16 t branchpc1 [15:0] $end
$var wire 16 u branch_target2 [15:0] $end
$var wire 16 v branch_target1 [15:0] $end
$var wire 16 w aluresultwb [15:0] $end
$var wire 16 x aluresultmem2 [15:0] $end
$var wire 16 y aluresultmem1 [15:0] $end
$var wire 16 z aluresult2 [15:0] $end
$var wire 16 { aluresult1 [15:0] $end
$var reg 16 | branchpc_reg [15:0] $end
$var reg 16 } branchtarget1_reg [15:0] $end
$var reg 16 ~ branchtarget2_reg [15:0] $end
$var reg 1 !" clk_reg $end
$var reg 128 "" regval [127:0] $end
$var reg 1 #" reset_reg $end
$scope module alu1 $end
$var wire 16 $" aluresult [15:0] $end
$var wire 12 %" alusignals [11:0] $end
$var wire 1 " clk $end
$var wire 16 &" instrout [15:0] $end
$var wire 1 '" is_branch_takenin $end
$var wire 1 U isld1 $end
$var wire 1 @ isst1 $end
$var wire 1 8 iswb_out $end
$var wire 16 (" op2_out [15:0] $end
$var wire 1 $ reset $end
$var wire 16 )" op2 [15:0] $end
$var wire 16 *" op1 [15:0] $end
$var wire 1 : iswb $end
$var wire 1 +" issub $end
$var wire 1 ," isst $end
$var wire 1 -" isor $end
$var wire 1 ." isnot $end
$var wire 1 /" ismul $end
$var wire 1 0" ismov $end
$var wire 1 1" islsr $end
$var wire 1 2" islsl $end
$var wire 1 3" isld $end
$var wire 1 o isimmediate $end
$var wire 1 4" iscmp $end
$var wire 1 5" isand $end
$var wire 1 6" isadd $end
$var wire 16 7" instrin [15:0] $end
$var wire 5 8" immx [4:0] $end
$var reg 16 9" A [15:0] $end
$var reg 16 :" B [15:0] $end
$var reg 5 ;" immx_reg [4:0] $end
$var reg 16 <" instrout_reg [15:0] $end
$var reg 16 =" instrout_reg1 [15:0] $end
$var reg 1 >" isadd_reg $end
$var reg 1 ?" isand_reg $end
$var reg 1 @" iscmp_reg $end
$var reg 1 A" isimmediate_reg $end
$var reg 1 B" isld1_1 $end
$var reg 1 C" isld_reg $end
$var reg 1 D" islsl_reg $end
$var reg 1 E" islsr_reg $end
$var reg 1 F" ismov_reg $end
$var reg 1 G" ismul_reg $end
$var reg 1 H" isnot_reg $end
$var reg 1 I" isor_reg $end
$var reg 1 J" isst1_1 $end
$var reg 1 K" isst_reg $end
$var reg 1 L" issub_reg $end
$var reg 1 M" iswb1_1 $end
$var reg 1 N" iswb1_reg $end
$var reg 16 O" op1_reg [15:0] $end
$var reg 16 P" op2_1 [15:0] $end
$var reg 16 Q" op2_reg [15:0] $end
$var reg 16 R" result [15:0] $end
$var reg 16 S" result_1 [15:0] $end
$upscope $end
$scope module alu2 $end
$var wire 16 T" aluresult [15:0] $end
$var wire 12 U" alusignals [11:0] $end
$var wire 1 " clk $end
$var wire 16 V" instrout [15:0] $end
$var wire 1 W" is_branch_takenin $end
$var wire 1 T isld1 $end
$var wire 1 ? isst1 $end
$var wire 1 7 iswb_out $end
$var wire 16 X" op2_out [15:0] $end
$var wire 1 $ reset $end
$var wire 16 Y" op2 [15:0] $end
$var wire 16 Z" op1 [15:0] $end
$var wire 1 9 iswb $end
$var wire 1 [" issub $end
$var wire 1 \" isst $end
$var wire 1 ]" isor $end
$var wire 1 ^" isnot $end
$var wire 1 _" ismul $end
$var wire 1 `" ismov $end
$var wire 1 a" islsr $end
$var wire 1 b" islsl $end
$var wire 1 c" isld $end
$var wire 1 p isimmediate $end
$var wire 1 d" iscmp $end
$var wire 1 e" isand $end
$var wire 1 f" isadd $end
$var wire 16 g" instrin [15:0] $end
$var wire 5 h" immx [4:0] $end
$var reg 16 i" A [15:0] $end
$var reg 16 j" B [15:0] $end
$var reg 5 k" immx_reg [4:0] $end
$var reg 16 l" instrout_reg [15:0] $end
$var reg 16 m" instrout_reg1 [15:0] $end
$var reg 1 n" isadd_reg $end
$var reg 1 o" isand_reg $end
$var reg 1 p" iscmp_reg $end
$var reg 1 q" isimmediate_reg $end
$var reg 1 r" isld1_1 $end
$var reg 1 s" isld_reg $end
$var reg 1 t" islsl_reg $end
$var reg 1 u" islsr_reg $end
$var reg 1 v" ismov_reg $end
$var reg 1 w" ismul_reg $end
$var reg 1 x" isnot_reg $end
$var reg 1 y" isor_reg $end
$var reg 1 z" isst1_1 $end
$var reg 1 {" isst_reg $end
$var reg 1 |" issub_reg $end
$var reg 1 }" iswb1_1 $end
$var reg 1 ~" iswb1_reg $end
$var reg 16 !# op1_reg [15:0] $end
$var reg 16 "# op2_1 [15:0] $end
$var reg 16 ## op2_reg [15:0] $end
$var reg 16 $# result [15:0] $end
$var reg 16 %# result_1 [15:0] $end
$upscope $end
$scope module control_unit1 $end
$var wire 1 " clk $end
$var wire 1 # is_branch_taken $end
$var wire 1 ] isbeq $end
$var wire 1 [ isbgt $end
$var wire 1 < isubranch $end
$var wire 1 : iswb $end
$var wire 1 $ reset $end
$var wire 1 % stall $end
$var wire 1 > issub $end
$var wire 1 C isst $end
$var wire 1 F isor $end
$var wire 1 H isnot $end
$var wire 1 J ismul $end
$var wire 1 L ismov $end
$var wire 1 N islsr $end
$var wire 1 P islsl $end
$var wire 1 W isld $end
$var wire 1 Y iscmp $end
$var wire 1 _ isand $end
$var wire 1 a isadd $end
$var wire 16 &# instr [15:0] $end
$var reg 1 a isadd_next $end
$var reg 1 '# isadd_reg $end
$var reg 1 _ isand_next $end
$var reg 1 (# isand_reg $end
$var reg 1 )# isbeq_next $end
$var reg 1 *# isbeq_reg $end
$var reg 1 +# isbgt_next $end
$var reg 1 ,# isbgt_reg $end
$var reg 1 Y iscmp_next $end
$var reg 1 -# iscmp_reg $end
$var reg 1 W isld_next $end
$var reg 1 .# isld_reg $end
$var reg 1 P islsl_next $end
$var reg 1 /# islsl_reg $end
$var reg 1 N islsr_next $end
$var reg 1 0# islsr_reg $end
$var reg 1 L ismov_next $end
$var reg 1 1# ismov_reg $end
$var reg 1 J ismul_next $end
$var reg 1 2# ismul_reg $end
$var reg 1 H isnot_next $end
$var reg 1 3# isnot_reg $end
$var reg 1 F isor_next $end
$var reg 1 4# isor_reg $end
$var reg 1 C isst_next $end
$var reg 1 5# isst_reg $end
$var reg 1 > issub_next $end
$var reg 1 6# issub_reg $end
$var reg 1 7# isubranch_next $end
$var reg 1 8# isubranch_reg $end
$var reg 1 9# iswb_next $end
$var reg 1 :# iswb_reg $end
$var reg 1 ;# stall_flag $end
$var reg 16 <# stalled_instr [15:0] $end
$upscope $end
$scope module control_unit2 $end
$var wire 1 " clk $end
$var wire 1 # is_branch_taken $end
$var wire 1 \ isbeq $end
$var wire 1 Z isbgt $end
$var wire 1 ; isubranch $end
$var wire 1 9 iswb $end
$var wire 1 $ reset $end
$var wire 1 % stall $end
$var wire 1 = issub $end
$var wire 1 B isst $end
$var wire 1 E isor $end
$var wire 1 G isnot $end
$var wire 1 I ismul $end
$var wire 1 K ismov $end
$var wire 1 M islsr $end
$var wire 1 O islsl $end
$var wire 1 V isld $end
$var wire 1 X iscmp $end
$var wire 1 ^ isand $end
$var wire 1 ` isadd $end
$var wire 16 =# instr [15:0] $end
$var reg 1 ` isadd_next $end
$var reg 1 ># isadd_reg $end
$var reg 1 ^ isand_next $end
$var reg 1 ?# isand_reg $end
$var reg 1 @# isbeq_next $end
$var reg 1 A# isbeq_reg $end
$var reg 1 B# isbgt_next $end
$var reg 1 C# isbgt_reg $end
$var reg 1 X iscmp_next $end
$var reg 1 D# iscmp_reg $end
$var reg 1 V isld_next $end
$var reg 1 E# isld_reg $end
$var reg 1 O islsl_next $end
$var reg 1 F# islsl_reg $end
$var reg 1 M islsr_next $end
$var reg 1 G# islsr_reg $end
$var reg 1 K ismov_next $end
$var reg 1 H# ismov_reg $end
$var reg 1 I ismul_next $end
$var reg 1 I# ismul_reg $end
$var reg 1 G isnot_next $end
$var reg 1 J# isnot_reg $end
$var reg 1 E isor_next $end
$var reg 1 K# isor_reg $end
$var reg 1 B isst_next $end
$var reg 1 L# isst_reg $end
$var reg 1 = issub_next $end
$var reg 1 M# issub_reg $end
$var reg 1 N# isubranch_next $end
$var reg 1 O# isubranch_reg $end
$var reg 1 P# iswb_next $end
$var reg 1 Q# iswb_reg $end
$var reg 1 R# stall_flag $end
$var reg 16 S# stalled_instr [15:0] $end
$upscope $end
$scope module decode_unit1 $end
$var wire 16 T# branch_target [15:0] $end
$var wire 1 " clk $end
$var wire 5 U# imm [4:0] $end
$var wire 1 o imm_flag $end
$var wire 16 V# instrout [15:0] $end
$var wire 1 # is_branch_taken $end
$var wire 16 W# op1 [15:0] $end
$var wire 16 X# op2 [15:0] $end
$var wire 4 Y# opcode [3:0] $end
$var wire 1 $ reset $end
$var wire 1 % stall $end
$var wire 20 Z# rdvalmem2 [19:0] $end
$var wire 20 [# rdvalmem1 [19:0] $end
$var wire 16 \# instr [15:0] $end
$var reg 16 ]# branch_target_next [15:0] $end
$var reg 16 ^# branch_target_reg [15:0] $end
$var reg 1 _# imm_flag_next $end
$var reg 1 `# imm_flag_reg $end
$var reg 5 a# imm_next [4:0] $end
$var reg 5 b# imm_reg [4:0] $end
$var reg 16 c# instrn [15:0] $end
$var reg 16 d# instrun [15:0] $end
$var reg 16 e# op1_next [15:0] $end
$var reg 16 f# op1_reg [15:0] $end
$var reg 16 g# op2_next [15:0] $end
$var reg 16 h# op2_reg [15:0] $end
$var reg 4 i# opcode_next [3:0] $end
$var reg 4 j# opcode_reg [3:0] $end
$var reg 3 k# rd [2:0] $end
$var reg 3 l# rs1 [2:0] $end
$var reg 3 m# rs2 [2:0] $end
$upscope $end
$scope module decode_unit2 $end
$var wire 16 n# branch_target [15:0] $end
$var wire 1 " clk $end
$var wire 5 o# imm [4:0] $end
$var wire 1 p imm_flag $end
$var wire 16 p# instrout [15:0] $end
$var wire 1 # is_branch_taken $end
$var wire 16 q# op1 [15:0] $end
$var wire 16 r# op2 [15:0] $end
$var wire 4 s# opcode [3:0] $end
$var wire 1 $ reset $end
$var wire 1 % stall $end
$var wire 20 t# rdvalmem2 [19:0] $end
$var wire 20 u# rdvalmem1 [19:0] $end
$var wire 16 v# instr [15:0] $end
$var reg 16 w# branch_target_next [15:0] $end
$var reg 16 x# branch_target_reg [15:0] $end
$var reg 1 y# imm_flag_next $end
$var reg 1 z# imm_flag_reg $end
$var reg 5 {# imm_next [4:0] $end
$var reg 5 |# imm_reg [4:0] $end
$var reg 16 }# instrn [15:0] $end
$var reg 16 ~# instrun [15:0] $end
$var reg 16 !$ op1_next [15:0] $end
$var reg 16 "$ op1_reg [15:0] $end
$var reg 16 #$ op2_next [15:0] $end
$var reg 16 $$ op2_reg [15:0] $end
$var reg 4 %$ opcode_next [3:0] $end
$var reg 4 &$ opcode_reg [3:0] $end
$var reg 3 '$ rd [2:0] $end
$var reg 3 ($ rs1 [2:0] $end
$var reg 3 )$ rs2 [2:0] $end
$upscope $end
$scope module execute2 $end
$var wire 16 *$ brachtarget [15:0] $end
$var wire 16 +$ branchpc [15:0] $end
$var wire 1 " clk $end
$var wire 1 \ isBeq $end
$var wire 1 Z isBgt $end
$var wire 1 ; isunconditionalbranch $end
$var wire 128 ,$ regval [127:0] $end
$var wire 1 $ reset $end
$var wire 1 b isbranchtaken $end
$var reg 16 -$ branchpc_reg [15:0] $end
$var reg 16 .$ branchpc_reg1 [15:0] $end
$var reg 16 /$ isbranchtaken_reg [15:0] $end
$var reg 16 0$ isbranchtaken_reg1 [15:0] $end
$var integer 32 1$ i [31:0] $end
$upscope $end
$scope module execute_unit1 $end
$var wire 16 2$ brachtarget [15:0] $end
$var wire 16 3$ branchpc [15:0] $end
$var wire 1 " clk $end
$var wire 1 ] isBeq $end
$var wire 1 [ isBgt $end
$var wire 1 < isunconditionalbranch $end
$var wire 128 4$ regval [127:0] $end
$var wire 1 $ reset $end
$var wire 1 c isbranchtaken $end
$var reg 16 5$ branchpc_reg [15:0] $end
$var reg 16 6$ branchpc_reg1 [15:0] $end
$var reg 16 7$ isbranchtaken_reg [15:0] $end
$var reg 16 8$ isbranchtaken_reg1 [15:0] $end
$var integer 32 9$ i [31:0] $end
$upscope $end
$scope module fetch_unit $end
$var wire 16 :$ branch_target [15:0] $end
$var wire 1 " clk $end
$var wire 16 ;$ instr1 [15:0] $end
$var wire 16 <$ instr2 [15:0] $end
$var wire 1 # is_branch_taken $end
$var wire 1 $ reset $end
$var wire 1 A stall $end
$var wire 1 D issingleinstr $end
$var reg 16 =$ instr1_reg [15:0] $end
$var reg 16 >$ instr2_reg [15:0] $end
$var reg 16 ?$ pc [15:0] $end
$upscope $end
$scope module memory_unit1 $end
$var wire 16 @$ aluresult [15:0] $end
$var wire 16 A$ aluresult_out [15:0] $end
$var wire 1 " clk $end
$var wire 16 B$ instr [15:0] $end
$var wire 16 C$ instr_out [15:0] $end
$var wire 1 U isld $end
$var wire 1 S isld_out $end
$var wire 1 @ isst $end
$var wire 1 8 iswb $end
$var wire 1 6 iswb_out $end
$var wire 16 D$ ldresult [15:0] $end
$var wire 16 E$ op2 [15:0] $end
$var wire 20 F$ rdvalmem [19:0] $end
$var wire 1 $ reset $end
$var reg 16 G$ aluresult_reg [15:0] $end
$var reg 16 H$ instr_1 [15:0] $end
$var reg 16 I$ instr_rd [15:0] $end
$var reg 1 J$ isld_1 $end
$var reg 1 K$ isld_reg $end
$var reg 1 L$ iswb_1 $end
$var reg 1 M$ iswb_reg $end
$var reg 16 N$ ld [15:0] $end
$var reg 16 O$ ld_reg [15:0] $end
$var reg 20 P$ rdval [19:0] $end
$var reg 20 Q$ result [19:0] $end
$var integer 32 R$ file [31:0] $end
$var integer 32 S$ i [31:0] $end
$upscope $end
$scope module memory_unit2 $end
$var wire 16 T$ aluresult [15:0] $end
$var wire 16 U$ aluresult_out [15:0] $end
$var wire 1 " clk $end
$var wire 16 V$ instr [15:0] $end
$var wire 16 W$ instr_out [15:0] $end
$var wire 1 T isld $end
$var wire 1 R isld_out $end
$var wire 1 ? isst $end
$var wire 1 7 iswb $end
$var wire 1 5 iswb_out $end
$var wire 16 X$ ldresult [15:0] $end
$var wire 16 Y$ op2 [15:0] $end
$var wire 20 Z$ rdvalmem [19:0] $end
$var wire 1 $ reset $end
$var reg 16 [$ aluresult_reg [15:0] $end
$var reg 16 \$ instr_1 [15:0] $end
$var reg 16 ]$ instr_rd [15:0] $end
$var reg 1 ^$ isld_1 $end
$var reg 1 _$ isld_reg $end
$var reg 1 `$ iswb_1 $end
$var reg 1 a$ iswb_reg $end
$var reg 16 b$ ld [15:0] $end
$var reg 16 c$ ld_reg [15:0] $end
$var reg 20 d$ rdval [19:0] $end
$var reg 20 e$ result [19:0] $end
$var integer 32 f$ file [31:0] $end
$var integer 32 g$ i [31:0] $end
$upscope $end
$scope module relayer_unit $end
$var wire 16 h$ buffer11 [15:0] $end
$var wire 16 i$ buffer12 [15:0] $end
$var wire 16 j$ buffer21 [15:0] $end
$var wire 16 k$ buffer22 [15:0] $end
$var wire 16 l$ instr1_in [15:0] $end
$var wire 16 m$ instr1_o [15:0] $end
$var wire 16 n$ instr2_in [15:0] $end
$var wire 16 o$ instr2_o [15:0] $end
$var wire 1 D issingleinstr $end
$var wire 1 A isstall $end
$var reg 1 p$ check $end
$var reg 16 q$ instr1 [15:0] $end
$var reg 16 r$ instr1_out [15:0] $end
$var reg 16 s$ instr2 [15:0] $end
$var reg 16 t$ instr2_out [15:0] $end
$var reg 1 u$ issingleinstr_reg $end
$var reg 1 v$ isstall_reg $end
$var reg 16 w$ singinstr [15:0] $end
$var reg 16 x$ tempinstr1 [15:0] $end
$var reg 16 y$ tempinstr2 [15:0] $end
$var integer 32 z$ i [31:0] $end
$var integer 32 {$ p [31:0] $end
$upscope $end
$scope module writeback_unit1 $end
$var wire 16 |$ aluresult [15:0] $end
$var wire 16 }$ aluresultmem2 [15:0] $end
$var wire 16 ~$ aluresultwb [15:0] $end
$var wire 1 " clk $end
$var wire 16 !% instr [15:0] $end
$var wire 16 "% instrmemwb2 [15:0] $end
$var wire 16 #% instrwb [15:0] $end
$var wire 1 S isld $end
$var wire 1 R isldmem2 $end
$var wire 1 Q isldwb $end
$var wire 1 6 iswb $end
$var wire 1 5 iswbin2 $end
$var wire 1 4 iswbwb $end
$var wire 16 $% ldresult [15:0] $end
$var wire 16 %% ldresult2 [15:0] $end
$var wire 16 &% ldresultwb [15:0] $end
$var wire 128 '% regvalwb [127:0] $end
$var reg 16 (% aluresultwb_reg [15:0] $end
$var reg 16 )% instrwb_reg [15:0] $end
$var reg 1 *% isldwb_reg $end
$var reg 1 +% iswbwb_reg $end
$var reg 16 ,% ldresultwb_reg [15:0] $end
$var reg 128 -% regval_reg [127:0] $end
$var reg 16 .% result [15:0] $end
$upscope $end
$scope module writeback_unit2 $end
$var wire 16 /% aluresult [15:0] $end
$var wire 1 " clk $end
$var wire 16 0% instr [15:0] $end
$var wire 1 Q isld $end
$var wire 1 4 iswb $end
$var wire 16 1% ldresult [15:0] $end
$var wire 128 2% regvalwb [127:0] $end
$var reg 16 3% result [15:0] $end
$var integer 32 4% file [31:0] $end
$var integer 32 5% i [31:0] $end
$upscope $end
$upscope $end
$upscope $end
$enddefinitions $end
#0
$dumpvars
bx 5%
bx 4%
bx 3%
bx 2%
b0 1%
b0 0%
b0 /%
b0 .%
bx -%
b0 ,%
0+%
0*%
b0 )%
b0 (%
bx '%
b0 &%
b0 %%
b0 $%
b0 #%
bx "%
bx !%
b0 ~$
b0 }$
b0 |$
b0 {$
b10 z$
b0 y$
b0 x$
b0 w$
0v$
0u$
b0 t$
b0 s$
b0 r$
b0 q$
0p$
b0 o$
b0 n$
b0 m$
b0 l$
b0 k$
b0 j$
b0 i$
b0 h$
bx g$
bx f$
b0 e$
b0 d$
b0 c$
b0 b$
xa$
x`$
x_$
x^$
bx ]$
bx \$
b0 [$
b0 Z$
b0 Y$
b0 X$
bx W$
b0 V$
b0 U$
b0 T$
bx S$
bx R$
b0 Q$
b0 P$
b0 O$
b0 N$
xM$
xL$
xK$
xJ$
bx I$
bx H$
b0 G$
b0 F$
b0 E$
b0 D$
bx C$
b0 B$
b0 A$
b0 @$
b0 ?$
b0 >$
b0 =$
b0 <$
b0 ;$
b0 :$
bx 9$
bx 8$
bx 7$
bx 6$
bx 5$
bx 4$
bx 3$
b0 2$
bx 1$
bx 0$
bx /$
bx .$
bx -$
bx ,$
bx +$
b0 *$
bx )$
bx ($
bx '$
bx &$
b0 %$
bx $$
b0 #$
bx "$
b0 !$
b0 ~#
bx }#
bx |#
b0 {#
xz#
0y#
bx x#
b0 w#
b0 v#
b0 u#
b0 t#
b0 s#
b0 r#
b0 q#
b0 p#
b0 o#
b0 n#
bx m#
bx l#
bx k#
bx j#
b0 i#
bx h#
b0 g#
bx f#
b0 e#
b0 d#
bx c#
bx b#
b0 a#
x`#
0_#
bx ^#
b0 ]#
b0 \#
b0 [#
b0 Z#
b0 Y#
b0 X#
b0 W#
b0 V#
b0 U#
b0 T#
bx S#
xR#
0Q#
0P#
0O#
0N#
0M#
0L#
0K#
0J#
0I#
0H#
0G#
0F#
0E#
0D#
0C#
0B#
0A#
0@#
0?#
0>#
b0 =#
bx <#
x;#
0:#
09#
08#
07#
06#
05#
04#
03#
02#
01#
00#
0/#
0.#
0-#
0,#
0+#
0*#
0)#
0(#
0'#
b0 &#
bx %#
b0 $#
b0 ##
bx "#
b0 !#
x~"
x}"
0|"
0{"
xz"
0y"
0x"
0w"
0v"
0u"
0t"
0s"
xr"
0q"
0p"
0o"
0n"
b0 m"
b0 l"
b0 k"
bx j"
bx i"
b0 h"
b0 g"
0f"
0e"
0d"
0c"
0b"
0a"
0`"
0_"
0^"
0]"
0\"
0["
b0 Z"
b0 Y"
b0 X"
0W"
b0 V"
b0 U"
b0 T"
bx S"
b0 R"
b0 Q"
bx P"
b0 O"
xN"
xM"
0L"
0K"
xJ"
0I"
0H"
0G"
0F"
0E"
0D"
0C"
xB"
0A"
0@"
0?"
0>"
b0 ="
b0 <"
b0 ;"
bx :"
bx 9"
b0 8"
b0 7"
06"
05"
04"
03"
02"
01"
00"
0/"
0."
0-"
0,"
0+"
b0 *"
b0 )"
b0 ("
0'"
b0 &"
b0 %"
b0 $"
1#"
bx ""
0!"
b0 ~
b0 }
b0 |
b0 {
b0 z
b0 y
b0 x
b0 w
b0 v
b0 u
bx t
bx s
b0 r
b0 q
0p
0o
b0 n
b0 m
b0 l
b0 k
b0 j
b0 i
b0 h
b0 g
bx f
bx e
b0 d
xc
xb
0a
0`
0_
0^
0]
0\
0[
0Z
0Y
0X
0W
0V
0U
0T
xS
xR
0Q
0P
0O
0N
0M
0L
0K
0J
0I
0H
0G
0F
0E
0D
0C
0B
0A
0@
0?
0>
0=
0<
0;
0:
09
x8
x7
x6
x5
04
b0 3
b0 2
b0 1
b0 0
b0 /
b0 .
b0 -
b0 ,
b0 +
b0 *
b0 )
b0 (
b0 '
bx &
z%
1$
x#
0"
b0 !
$end
#10
0$
0#"
#15
0#
0c
0b
b0 7$
b0 t
b0 3$
b0 5$
08
0N"
0J"
0B"
b0 P"
b0 S"
b0 f
b0 C$
b0 !%
b0 I$
0J$
bx d
bx #%
bx 0%
bx )%
xQ
x*%
x4
x+%
b0 /$
b0 s
b0 +$
b0 -$
07
0~"
0z"
0r"
b0 "#
b0 %#
b0 e
b0 W$
b0 "%
b0 ]$
0^$
b0 }#
0z#
b0 $$
b0 "$
b0 x#
b0 |#
b0 &$
b0 c#
0`#
b0 h#
b0 f#
b0 ^#
b0 b#
b0 j#
b1000 1$
b1000 9$
b1001110110000 j$
b1000100101000 h$
b1001110110000 k
b1001110110000 =#
b1001110110000 v#
b1001110110000 o$
b1001110110000 t$
b1000100101000 m
b1000100101000 &#
b1000100101000 \#
b1000100101000 m$
b1000100101000 r$
b10 z$
b1001110110000 s$
b1000100101000 q$
b0 :"
b0 9"
b1110000000000000110000000000000010100000000000001000000000000000011000000000000001000000000000000010000000000000000 &
b1110000000000000110000000000000010100000000000001000000000000000011000000000000001000000000000000010000000000000000 '%
b1110000000000000110000000000000010100000000000001000000000000000011000000000000001000000000000000010000000000000000 2%
b1110000000000000110000000000000010100000000000001000000000000000011000000000000001000000000000000010000000000000000 -%
b0 j"
b0 i"
b1110000000000000110000000000000010100000000000001000000000000000011000000000000001000000000000000010000000000000000 ""
b1110000000000000110000000000000010100000000000001000000000000000011000000000000001000000000000000010000000000000000 ,$
b1110000000000000110000000000000010100000000000001000000000000000011000000000000001000000000000000010000000000000000 4$
b0 )$
b0 ($
b0 '$
b0 m#
b0 l#
b0 k#
b1001110110000 l
b1001110110000 <$
b1001110110000 n$
b1001110110000 >$
b1000100101000 n
b1000100101000 ;$
b1000100101000 l$
b1000100101000 =$
b10 ?$
1"
1!"
#20
0"
0!"
#25
16"
b1110110000 ~
b100101000 }
1f"
b0 \$
05
0a$
0R
0_$
0}"
b0 0$
b0 .$
b0 d
b0 #%
b0 0%
b0 )%
b0 H$
06
0M$
0S
0K$
0M"
b0 8$
b0 6$
b1000100101000 h
b1000100101000 7"
b1000100101000 V#
b1000100101000 d#
b100101000 v
b100101000 T#
b100101000 2$
b100101000 ]#
b1000 r
b1000 8"
b1000 U#
b1000 a#
b1 *
b1 Y#
b1 i#
b10 .
b10 )"
b10 X#
b10 g#
b1 0
b1 *"
b1 W#
b1 e#
1:
19#
b1 %"
1a
b1001110110000 g
b1001110110000 g"
b1001110110000 p#
b1001110110000 ~#
b1110110000 u
b1110110000 n#
b1110110000 *$
b1110110000 w#
b10000 q
b10000 h"
b10000 o#
b10000 {#
b1 )
b1 s#
b1 %$
b100 ,
b100 Y"
b100 r#
b100 #$
b101 /
b101 Z"
b101 q#
b101 !$
19
1P#
b1 U"
1`
bx j$
bx h$
b1001110110000 k$
b1000100101000 i$
bx k
bx =#
bx v#
bx o$
bx t$
bx m
bx &#
bx \#
bx m$
bx r$
b10 z$
bx s$
bx q$
bx l
bx <$
bx n$
bx >$
bx n
bx ;$
bx l$
bx =$
b100 ?$
b10 m#
b1 l#
b1 k#
b100 )$
b101 ($
b11 '$
1"
1!"
#30
0"
0!"
#35
0f"
06"
b0xxxxxxxxxxx ~
b0xxxxxxxxxxx }
18
1N"
b1000100101000 j
b1000100101000 &"
b1000100101000 B$
b1000100101000 <"
b11 {
b11 $"
b11 @$
b11 R"
0L$
0Q
0*%
04
0+%
17
1~"
b1001110110000 i
b1001110110000 V"
b1001110110000 V$
b1001110110000 l"
b1001 z
b1001 T"
b1001 T$
b1001 $#
0`$
1Q#
1>#
09
0P#
b0 U"
0`
b1001110110000 }#
b100 $$
b101 "$
b1110110000 x#
b10000 |#
b1 &$
bx g
bx g"
bx p#
bx ~#
b0xxxxxxxxxxx u
b0xxxxxxxxxxx n#
b0xxxxxxxxxxx *$
b0xxxxxxxxxxx w#
bx q
bx h"
bx o#
bx {#
xp
xy#
bx )
bx s#
bx %$
b0xxxxx ,
b0xxxxx Y"
b0xxxxx r#
b0xxxxx #$
bx /
bx Z"
bx q#
bx !$
1:#
1'#
0:
09#
b0 %"
0a
b1000100101000 c#
b10 h#
b1 f#
b100101000 ^#
b1000 b#
b1 j#
bx h
bx 7"
bx V#
bx d#
b0xxxxxxxxxxx v
b0xxxxxxxxxxx T#
b0xxxxxxxxxxx 2$
b0xxxxxxxxxxx ]#
bx r
bx 8"
bx U#
bx a#
xo
x_#
bx *
bx Y#
bx i#
b0xxxxx .
b0xxxxx )"
b0xxxxx X#
b0xxxxx g#
bx 0
bx *"
bx W#
bx e#
b10 :"
b1 9"
b100 j"
b101 i"
bx )$
bx ($
bx '$
bx m#
bx l#
bx k#
b110 ?$
1"
1!"
#40
0"
0!"
#45
b1001110110000 e
b1001110110000 W$
b1001110110000 "%
b1001110110000 ]$
15
1a$
b1001 x
b1001 U$
b1001 }$
b1001 [$
b1100000000000010010 '
b1100000000000010010 Z#
b1100000000000010010 t#
b1100000000000010010 Z$
b1100000000000010010 e$
1}"
07
0~"
b1001 %#
b1001110110000 m"
bx i
bx V"
bx V$
bx l"
b0 z
b0 T"
b0 T$
b0 $#
b1000100101000 f
b1000100101000 C$
b1000100101000 !%
b1000100101000 I$
16
1M$
b11 y
b11 A$
b11 |$
b11 G$
b100000000000000110 (
b100000000000000110 [#
b100000000000000110 u#
b100000000000000110 F$
b100000000000000110 Q$
1M"
08
0N"
b11 S"
b1000100101000 ="
bx j
bx &"
bx B$
bx <"
b0 {
b0 $"
b0 @$
b0 R"
bx c#
x`#
b0xxxxx h#
bx f#
b0xxxxxxxxxxx ^#
bx b#
bx j#
0:#
0'#
bx }#
xz#
b0xxxxx $$
bx "$
b0xxxxxxxxxxx x#
bx |#
bx &$
0Q#
0>#
b0xxxxx j"
bx i"
b0xxxxx :"
bx 9"
b1000 ?$
1"
1!"
#50
0"
0!"
#55
b1000 5%
b10000000000000000000000000000011 4%
b1001 3%
0M"
b0 S"
bx ="
b1000100101000 H$
bx f
bx C$
bx !%
bx I$
1L$
06
0M$
b100000000000000110 P$
b0 y
b0 A$
b0 |$
b0 G$
bx00000000000000000 (
bx00000000000000000 [#
bx00000000000000000 u#
bx00000000000000000 F$
bx00000000000000000 Q$
b1001 w
b1001 ~$
b1001 /%
b1001 (%
b1001110110000 d
b1001110110000 #%
b1001110110000 0%
b1001110110000 )%
14
1+%
0}"
b0 %#
bx m"
b1001110110000 \$
bx e
bx W$
bx "%
bx ]$
1`$
05
0a$
b1100000000000010010 d$
b0 x
b0 U$
b0 }$
b0 [$
bx00000000000000000 '
bx00000000000000000 Z#
bx00000000000000000 t#
bx00000000000000000 Z$
bx00000000000000000 e$
b1110000000000000110000000000000010100000000000001000000000000000011000000000000001000000000000000110000000000000000 &
b1110000000000000110000000000000010100000000000001000000000000000011000000000000001000000000000000110000000000000000 '%
b1110000000000000110000000000000010100000000000001000000000000000011000000000000001000000000000000110000000000000000 2%
b1110000000000000110000000000000010100000000000001000000000000000011000000000000001000000000000000110000000000000000 -%
b11 .%
b1010 ?$
1"
1!"
#60
0"
0!"
#65
bx \$
0`$
bx00000000000000000 d$
b0 w
b0 ~$
b0 /%
b0 (%
bx d
bx #%
bx 0%
bx )%
04
0+%
bx H$
0L$
bx00000000000000000 P$
b1000 9$
b1000 1$
b1000 5%
b1110000000000000110000000000000010100000000000001000000000000001001000000000000001000000000000000110000000000000000 ""
b1110000000000000110000000000000010100000000000001000000000000001001000000000000001000000000000000110000000000000000 ,$
b1110000000000000110000000000000010100000000000001000000000000001001000000000000001000000000000000110000000000000000 4$
b1110000000000000110000000000000010100000000000001000000000000001001000000000000001000000000000000110000000000000000 &
b1110000000000000110000000000000010100000000000001000000000000001001000000000000001000000000000000110000000000000000 '%
b1110000000000000110000000000000010100000000000001000000000000001001000000000000001000000000000000110000000000000000 2%
b1110000000000000110000000000000010100000000000001000000000000001001000000000000001000000000000000110000000000000000 -%
b1100 ?$
1"
1!"
#70
0"
0!"
#75
b1110 ?$
1"
1!"
#80
0"
0!"
#85
b10000 ?$
1"
1!"
#90
0"
0!"
#95
b10010 ?$
1"
1!"
#100
0"
0!"
#105
b10100 ?$
1"
1!"
#110
0"
0!"
#115
b10110 ?$
1"
1!"
#120
0"
0!"
#125
b11000 ?$
1"
1!"
#130
0"
0!"
#135
b11010 ?$
1"
1!"
#140
0"
0!"
#145
b11100 ?$
1"
1!"
#150
0"
0!"
#155
b11110 ?$
1"
1!"
#160
0"
0!"
#165
b100000 ?$
1"
1!"
#170
0"
0!"
#175
b100010 ?$
1"
1!"
#180
0"
0!"
#185
b100100 ?$
1"
1!"
#190
0"
0!"
#195
b100110 ?$
1"
1!"
#200
0"
0!"
#205
b101000 ?$
1"
1!"
#210
0"
0!"
#215
b101010 ?$
1"
1!"
#220
0"
0!"
#225
b101100 ?$
1"
1!"
#230
0"
0!"
#235
b101110 ?$
1"
1!"
#240
0"
0!"
#245
b110000 ?$
1"
1!"
#250
0"
0!"
#255
b110010 ?$
1"
1!"
#260
0"
0!"
#265
b110100 ?$
1"
1!"
#270
0"
0!"
#275
b110110 ?$
1"
1!"
#280
0"
0!"
#285
b111000 ?$
1"
1!"
#290
0"
0!"
#295
b111010 ?$
1"
1!"
#300
0"
0!"
#305
b111100 ?$
1"
1!"
#310
0"
0!"
#315
b111110 ?$
1"
1!"
#320
0"
0!"
#325
b1000000 ?$
1"
1!"
#330
0"
0!"
#335
b1000010 ?$
1"
1!"
#340
0"
0!"
#345
b1000100 ?$
1"
1!"
#350
0"
0!"
#355
b1000110 ?$
1"
1!"
#360
0"
0!"
#365
b1001000 ?$
1"
1!"
#370
0"
0!"
#375
b1001010 ?$
1"
1!"
#380
0"
0!"
#385
b1001100 ?$
1"
1!"
#390
0"
0!"
#395
b1001110 ?$
1"
1!"
#400
0"
0!"
#405
b1010000 ?$
1"
1!"
#410
0"
0!"
#415
b1010010 ?$
1"
1!"
#420
0"
0!"
#425
b1010100 ?$
1"
1!"
#430
0"
0!"
#435
b1010110 ?$
1"
1!"
#440
0"
0!"
#445
b1011000 ?$
1"
1!"
#450
0"
0!"
#455
b1011010 ?$
1"
1!"
#460
0"
0!"
#465
b1011100 ?$
1"
1!"
#470
0"
0!"
#475
b1011110 ?$
1"
1!"
#480
0"
0!"
#485
b1100000 ?$
1"
1!"
#490
0"
0!"
#495
b1100010 ?$
1"
1!"
#500
0"
0!"
#505
b1100100 ?$
1"
1!"
#510
0"
0!"
#515
b1100110 ?$
1"
1!"
#520
0"
0!"
#525
b1101000 ?$
1"
1!"
#530
0"
0!"
#535
b1101010 ?$
1"
1!"
#540
0"
0!"
#545
b1101100 ?$
1"
1!"
#550
0"
0!"
#555
b1101110 ?$
1"
1!"
#560
0"
0!"
#565
b1110000 ?$
1"
1!"
#570
0"
0!"
#575
b1110010 ?$
1"
1!"
#580
0"
0!"
#585
b1110100 ?$
1"
1!"
#590
0"
0!"
#595
b1110110 ?$
1"
1!"
#600
0"
0!"
#605
b1111000 ?$
1"
1!"
#610
0"
0!"
#615
b1111010 ?$
1"
1!"
#620
0"
0!"
#625
b1111100 ?$
1"
1!"
#630
0"
0!"
#635
b1111110 ?$
1"
1!"
#640
0"
0!"
#645
b10000000 ?$
1"
1!"
#650
0"
0!"
#655
b10000010 ?$
1"
1!"
#660
0"
0!"
#665
b10000100 ?$
1"
1!"
#670
0"
0!"
#675
b10000110 ?$
1"
1!"
#680
0"
0!"
#685
b10001000 ?$
1"
1!"
#690
0"
0!"
#695
b10001010 ?$
1"
1!"
#700
0"
0!"
#705
b10001100 ?$
1"
1!"
#710
0"
0!"
#715
b10001110 ?$
1"
1!"
#720
0"
0!"
#725
b10010000 ?$
1"
1!"
#730
0"
0!"
#735
b10010010 ?$
1"
1!"
#740
0"
0!"
#745
b10010100 ?$
1"
1!"
#750
0"
0!"
#755
b10010110 ?$
1"
1!"
#760
0"
0!"
#765
b10011000 ?$
1"
1!"
#770
0"
0!"
#775
b10011010 ?$
1"
1!"
#780
0"
0!"
#785
b10011100 ?$
1"
1!"
#790
0"
0!"
#795
b10011110 ?$
1"
1!"
#800
0"
0!"
#805
b10100000 ?$
1"
1!"
#810
0"
0!"
#815
b10100010 ?$
1"
1!"
#820
0"
0!"
#825
b10100100 ?$
1"
1!"
#830
0"
0!"
#835
b10100110 ?$
1"
1!"
#840
0"
0!"
#845
b10101000 ?$
1"
1!"
#850
0"
0!"
#855
b10101010 ?$
1"
1!"
#860
0"
0!"
#865
b10101100 ?$
1"
1!"
#870
0"
0!"
#875
b10101110 ?$
1"
1!"
#880
0"
0!"
#885
b10110000 ?$
1"
1!"
#890
0"
0!"
#895
b10110010 ?$
1"
1!"
#900
0"
0!"
#905
b10110100 ?$
1"
1!"
#910
0"
0!"
#915
b10110110 ?$
1"
1!"
#920
0"
0!"
#925
b10111000 ?$
1"
1!"
#930
0"
0!"
#935
b10111010 ?$
1"
1!"
#940
0"
0!"
#945
b10111100 ?$
1"
1!"
#950
0"
0!"
#955
b10111110 ?$
1"
1!"
#960
0"
0!"
#965
b11000000 ?$
1"
1!"
#970
0"
0!"
#975
b11000010 ?$
1"
1!"
#980
0"
0!"
#985
b11000100 ?$
1"
1!"
#990
0"
0!"
#995
b11000110 ?$
1"
1!"
#1000
0"
0!"
